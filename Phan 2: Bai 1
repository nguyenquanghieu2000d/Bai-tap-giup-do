#include <iostream>
#include <fstream>
#include <cmath>
using namespace std;

class Point {
private:
	float x, y;
public:
	Point();
	friend class Dagiac;
	friend istream& operator >> (istream&, Point&);
	friend ostream& operator << (ostream&, Point);
	friend double KhoangCach(Point, Point);
	~Point(){}
};

Point::Point() {
	x = 0; y = 0;
}

istream& operator >> (istream& cin, Point& Point) {
	cin >> Point.x; cin >> Point.y;
	return cin;
}

ostream& operator << (ostream& cout, Point Point) {
	cout << "( " << Point.x << ", " << Point.y << " )";
	return cout;
}

double KhoangCach(Point A, Point B) {
	double result = sqrt(pow(A.x - B.x, 2) + pow(A.y - B.y, 2));
	return result;
}

class Dagiac {
private:
	Point* a;
	size_t Size;
public:
	Dagiac();
	friend istream& operator >> (istream&, Dagiac&);
	friend ostream& operator << (ostream&, Dagiac);
	friend bool KiemTra(Dagiac);
	friend bool KiemTraCan(Dagiac);
	~Dagiac() {}
};

Dagiac::Dagiac() {
	Size = 0;
}

istream& operator >> (istream& cin, Dagiac& Dagiac) {
	cout << "Nhap size: "; cin >> Dagiac.Size;
	Dagiac.a = new Point[Dagiac.Size];
	for (int i = 0; i < Dagiac.Size; i++) {
		cout << "Nhap diem thu " << i + 1 << ": ";
		cin >> Dagiac.a[i];
	}
	return cin;
}

ostream& operator << (ostream& cout, Dagiac Dagiac) {
	cout << endl << "Co " << Dagiac.Size << " diem" << endl;
	for (int i = 0; i < Dagiac.Size; i++) {
		cout << Dagiac.a[i] << " ";
	}
	cout << endl;
	return cout;
}

bool KiemTra(Dagiac X) {
	if (X.Size >= 4) return false;
	else {
		double a = KhoangCach(X.a[0], X.a[1]); 
		double b = KhoangCach(X.a[1], X.a[2]); 
		double c = KhoangCach(X.a[2], X.a[0]); 
		if (a + b > c && a + c > b && b + c > a && a > 0 && b > 0 && c > 0) return true;
		else return false;
	}
}

bool KiemTraCan(Dagiac X) {
	if (X.Size >= 4) return false;
	else {
		double a = KhoangCach(X.a[0], X.a[1]);
		double b = KhoangCach(X.a[1], X.a[2]);
		double c = KhoangCach(X.a[2], X.a[0]);
		if (a + b > c && a + c > b && b + c > a && a > 0 && b > 0 && c > 0) {
			if (a == b || b == c || c == a) return true;
			else return false;
		}
		else return false;
	}
	
}

void nhap(Dagiac X[], int n) {
	for (int i = 0; i < n; i++) {
		cout << "Nhap da giac thu " << i + 1 <<": " << endl;
		cin >> X[i]; cout << endl;
	}
	cout << endl;
}

void xuat(Dagiac X[], int n) {
	for (int i = 0; i < n; i++) {
		if (KiemTra(X[i])) {
			cout << "Da giac thu " << i + 1 << ": ";
			cout << X[i] << endl;
		}
	}
	cout << endl;
}

int main() {
	int n;
	cout << "Nhap so da giac: ";
	cin >> n;
	Dagiac X[100];
	cout << " ================ NHAP DA GIAC ==========================" << endl;
	nhap(X, n);
	cout << " ================ XUAT DA GIAC LA TAM GIAC ==============" << endl;
	xuat(X, n);
	return 0;
}
